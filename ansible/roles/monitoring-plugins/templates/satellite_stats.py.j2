#!/usr/bin/python
{% set candlepin_password = satellite_candlepin_password.stdout.split('=') %}
'''
File: satellite_stats.py
Description: Satellite Stats collection service
Author: Saurabh Badhwar <sbadhwar@redhat.com>
Date: 24/04/2017
'''
from statsd_plugin.StatsdPlugin import StatsdPlugin
import os
import psycopg2
import subprocess

class Satellite6(StatsdPlugin):
    '''
    Collects different metrics related to Satellite 6
    The collected metrics include:
     - Passenger Requests in Top Level Queue
     - Postgres Opened Files
    '''

    def satellite6_passenger_requests(self):
        '''
        Collect the number of requests in top-level queue in passenger
        Params: None
        Returns: None
        '''

        process_data = subprocess.check_output(['passenger-status']).split('\n')

        for field in process_data:
            if "Requests in top-level queue" in field:
                requests = field.split(':')[1].strip()
        self.store_results('passenger_requests_top_level_queue', requests)

    def satellite6_passenger_processes(self):
        '''
        Collect the number of processes inside passenger
        Params: None
        Returns: None
        '''

        process_data = subprocess.check_output(['passenger-status']).split('\n')

        for field in process_data:
            if "Processes" in field:
                processes = field.split(':')[1].strip()
        self.store_results('passenger_running_processes', processes)

    def satellite6_postgres_locks(self):
        '''
        Collects the metrics about how many locks are being held by postgres
        Params: None
        Returns: None
        '''

        process_data = subprocess.check_output('lsof | grep "postgres" | wc -l', shell=True).split('\n')[0]
        self.store_results('postgres_locks_held', int(process_data))

    def satellite6_foreman_dbio(self):
        '''
        Collects foreman read/write timings from postgres
        Params: None
        Returns: None
        '''

        db_connection = psycopg2.connect(dbname='foreman',host='127.0.0.1' ,user='foreman', password="{{ foreman_password.stdout }}")
        cursor = db_connection.cursor()
        cursor.execute("SELECT blk_read_time,blk_write_time FROM pg_stat_database WHERE datname='foreman'")
        try:
            read_time, write_time = cursor.fetchone()
            self.store_results('foreman_read_time', int(read_time))
            self.store_results('foreman_write_time', int(write_time))
        except ProgrammingError:
            print "Error reading foreman I/O time"
        cursor.commit()
        cursor.close()
        db_connection.close()

    def satellite6_candlepin_dbio(self):
        '''
        Collects foreman read/write timings from postgres
        Params: None
        Returns: None
        '''

        db_connection = psycopg2.connect(dbname='candlepin', host='127.0.0.1', user='candlepin', password="{{ candlepin_password[1] }}")
        cursor = db_connection.cursor()
        cursor.execute("SELECT blk_read_time,blk_write_time FROM pg_stat_database WHERE datname='candlepin'")
        try:
            read_time, write_time = cursor.fetchone()
            self.store_results('candlepin_read_time', int(read_time))
            self.store_results('candlepin_write_time', int(write_time))
        except ProgrammingError:
            print "Error reading candlepin I/O time"
        cursor.commit()
        cursor.close()
        db_connection.close()

    def satellite6_qpidd_files(self):
        '''
        Collects the number of open files by qpidd
        Params: None
        Returns: None
        '''

        #Get the PID of qpidd
        pid = subprocess.check_output('pidof qpidd', shell=True).split('\n')[0]
        process_query_string = 'lsof {}'.format(pid)
        num_open_files = subprocess.check_output(process_query_string, shell=True).split('\n')[0]
        self.store_results('qpidd_open_files', int(num_open_files))

    def satellite6_httpd_files(self):
        '''
        Collects the number of open files by httpd
        Params: None
        Returns: None
        '''

        #Get the PID of httpd
        pid = subprocess.check_output('pidof httpd', shell=True).split('\n')[0]
        process_query_string = 'lsof {}'.format(pid)
        num_open_files = subprocess.check_output(process_query_string, shell=True).split('\n')[0]
        self.store_results('httpd_open_files', int(num_open_files))

    def satellite6_qdrouterd_files(self):
        '''
        Collects the number of open files by qdrouterd
        Params: None
        Returns: None
        '''

        #Get the PID of qdrouterd
        pid = subprocess.check_output('pidof qdrouterd', shell=True).split('\n')[0]
        process_query_string = 'lsof {}'.format(pid)
        num_open_files = subprocess.check_output(process_query_string, shell=True).split('\n')[0]
        self.store_results('qdrouterd_open_files', int(num_open_files))

    def satellite6_ruby_gc(self):
        '''
        Monitors the GC count of ruby to find how many times the GC has run
        Params: None
        Returns: None
        '''

        process_query_string = "ruby -e 'puts GC.stat[:count]'"
        gc_count = subprocess.check_output(process_query_string, shell=True).split('\n')[0]
        self.store_results('ruby_gc_count', int(gc_count))


if __name__ == '__main__':
    try:
        sat6_plugin = Satellite6()
        sat6_plugin.start()
    except Exception, e:
        print str(e)
        sat6_plugin.stop()
